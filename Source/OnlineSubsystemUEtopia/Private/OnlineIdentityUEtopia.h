// Copyright 2016-2018 UEtopia, LLC. All Rights Reserved.

#pragma once

#include "OnlineJsonSerializer.h"
#include "OnlineIdentityInterface.h"
#include "OnlineSharingInterface.h"

/**
* Delegate fired after a profile request has been completed
*
* @param LocalUserNum the controller number of the associated user
* @param bWasSuccessful was the request successful
* @param ErrorStr error associated with the request
*/
DECLARE_DELEGATE_ThreeParams(FOnProfileRequestComplete, int32 /*LocalUserNum*/, bool /*bWasSuccessful*/, const FString& /*ErrorStr*/);

#define AUTH_TYPE_UETOPIA TEXT("uetopia");
#define FB_AUTH_EXPIRED_CREDS TEXT("com.epicgames.fb.oauth.expiredcreds");
#define FB_AUTH_CANCELED	  TEXT("com.epicgames.login.canceled");

/**
 * Info associated with an user account generated by this online service
 */
class FUserOnlineAccountUEtopia :
	public FUserOnlineAccount,
	public FOnlineJsonSerializable
{

public:

	// FOnlineUser

	virtual TSharedRef<const FUniqueNetId> GetUserId() const override { return UserIdPtr; }
	virtual FString GetRealName() const override { return TEXT("DummyRealName"); }
	virtual FString GetDisplayName(const FString& Platform = FString()) const override { return TEXT("DummyDisplayName"); }
	virtual bool GetUserAttribute(const FString& AttrName, FString& OutAttrValue) const override;
	virtual bool SetUserAttribute(const FString& AttrName, const FString& AttrValue) override; //4.11

	// FUserOnlineAccount

	virtual FString GetAccessToken() const override { return AuthTicket; }
	virtual bool GetAuthAttribute(const FString& AttrName, FString& OutAttrValue) const override;

	// This is not part of the OSS, but we have to be able to set Access tokens, because they need to be refreshed.
	bool SetAccessToken(FString& InAceessToken);

	// FUserOnlineAccountUEtopia
	/*
	FUserOnlineAccountUEtopia(const FString& InUserId=TEXT(""))
		: UserIdPtr(new FUniqueNetIdString(InUserId))
	{ }
	*/
	FUserOnlineAccountUEtopia(const FString& InUserId = TEXT(""), const FString& InAuthTicket = TEXT(""))
		: UserIdPtr(new FUniqueNetIdString(InUserId, TEXT("UEtopia")))
		, UserId(InUserId)
		, AuthTicket(InAuthTicket)
	{ }

	virtual ~FUserOnlineAccountUEtopia()
	{
	}

	/** User Id represented as a FUniqueNetId */
	TSharedRef<const FUniqueNetId> UserIdPtr;
	/** Id associated with the user account provided by the online service during registration */
	FString UserId;
	/** Public user name */
	FString UserName;
	/** Real name */
	FString RealName;
	/** male or female */
	FString Gender;
	/** eg. en_US */
	FString Locale;
	/** Ticket which is provided to user once authenticated by the online service */
	FString AuthTicket;
	/** IP Address to use for socket connections */
	FString SocketIpAddress;
	/** Firebase UID to use for socket connections */
	FString firebaseUser;

        /** Additional key/value pair data related to auth */
	TMap<FString, FString> AdditionalAuthData;
        /** Additional key/value pair data related to user attribution */
	TMap<FString, FString> UserAttributes;

	// FJsonSerializable

	BEGIN_ONLINE_JSON_SERIALIZER
		ONLINE_JSON_SERIALIZE("id", UserId);
		ONLINE_JSON_SERIALIZE("username", UserName);
		ONLINE_JSON_SERIALIZE("name", RealName);
		ONLINE_JSON_SERIALIZE("gender", Gender);
		ONLINE_JSON_SERIALIZE("locale", Locale);
		ONLINE_JSON_SERIALIZE("SocketIpAddress", SocketIpAddress);
		ONLINE_JSON_SERIALIZE("firebaseUser", firebaseUser);
	END_ONLINE_JSON_SERIALIZER

};


/**
* Contains URL details for Windows UEtopia interaction
*/
struct FUEtopiaLoginURL
{
	/** The endpoint at UEtopia we are supposed to hit for auth */
	FString LoginUrl;
	/** The redirect url for UEtopia to redirect to upon completion. Note: this is configured at Facebook too */
	FString LoginRedirectUrl;
	/** The client id given to us by UEtopia */
	FString ClientId;
	/** Config based list of permission scopes to use when logging in */
	TArray<FString> ScopeFields;
	/** Requested list of permission scopes when elevating permissions (merge into ScopeFields on success) */
	TArray<FString> NewScopeFields;
	/** Requested list of permission scopes when elevating permissions (merge into ScopeFields on success) */
	TArray<FString> RerequestScopeFields;
	/** A value used to verify our response came from our server */
	FString State;
	/** Should the URL include the popup display size */
	bool bUsePopup;

	FUEtopiaLoginURL()
		: bUsePopup(false)
	{ }

	bool IsValid() const
	{
		return !LoginUrl.IsEmpty() && !LoginRedirectUrl.IsEmpty() && !ClientId.IsEmpty();
	}

	FString GenerateNonce()
	{
		// random number to represent client generated state for verification on login
		State = FString::FromInt(FMath::Rand() % 100000);
		return State;
	}

	FString GetURL() const
	{
		FString Scopes = FString::Join(ScopeFields, TEXT(","));
		if (NewScopeFields.Num() > 0)
		{
			const FString AddlScopes = FString::Join(NewScopeFields, TEXT(","));
			Scopes += FString::Printf(TEXT(",%s"), *AddlScopes);
		}

		if (RerequestScopeFields.Num() > 0)
		{
			const FString AddlScopes = FString::Join(RerequestScopeFields, TEXT(","));
			Scopes += FString::Printf(TEXT(",%s&auth_type=rerequest"), *AddlScopes);
		}
		// &return_scopes=true
		// auth url to spawn in browser
		return FString::Printf(TEXT("%s?redirect_uri=%s&client_id=%s&state=%s&response_type=token&scope=%s%s"),
			*LoginUrl, *LoginRedirectUrl, *ClientId, *State, *Scopes, bUsePopup ? TEXT("&display=popup") : TEXT(""));
	}
};

/** Mapping from user id to his internal online account info (only one per user) */
typedef TMap<FString, TSharedRef<FUserOnlineAccountUEtopia> > FUserOnlineAccountUEtopiaMap;

/**
 * UEtopia service implementation of the online identity interface
 */
class FOnlineIdentityUEtopia : public IOnlineIdentity
{

	/** Const details about communicating with UEtopia API */
	FUEtopiaLoginURL LoginURLDetails;

	/** The endpoint at Facebook we are supposed to hit for auth */
	FString LoginUrl;
	/** The redirect url for Facebook to redirect to upon completion. Note: this is configured at Facebook too */
	FString LoginRedirectUrl;
	/** The client id given to us by Facebook */
	FString ClientId;

	/** Users that have been registered/authenticated */
	FUserOnlineAccountUEtopiaMap UserAccounts;
	/** Ids mapped to locally registered users */
	TMap<int32, TSharedPtr<const FUniqueNetId> > UserIds;


	/** The amount of elapsed time since the last check */
	float LastCheckElapsedTime;
	/** Used to determine if we've timed out waiting for the response */
	float TotalCheckElapsedTime;
	/** Config value used to set our timeout period */
	float MaxCheckElapsedTime;
	/** Whether we have a registration in flight or not */
	bool bHasLoginOutstanding;
	/** A value used to verify our response came from our server */
	FString State;
	/** index of local user being registered */
	int32 LocalUserNumPendingLogin;

	/** True if the user is logged in */
	bool bIsLoggedIn;


	// Refresh Token Timer
	/**
	* Ticks the registration process handling timeouts, etc.
	*
	* @param DeltaTime the amount of time that has elapsed since last tick
	*/
	void TickRefreshToken(float DeltaTime);

	/** The amount of elapsed time since the last check */
	float RefreshTokenLastCheckElapsedTime;
	/** Used to determine if we've timed out waiting for the response */
	float RefreshTokenTotalCheckElapsedTime;
	/** Config value used to set our timeout period - set in constructor*/
	float RefreshTokenMaxCheckElapsedTime;


public:

	// IOnlineIdentity

	virtual bool Login(int32 LocalUserNum, const FOnlineAccountCredentials& AccountCredentials) override;
	virtual bool Logout(int32 LocalUserNum) override;
	virtual bool AutoLogin(int32 LocalUserNum) override;
	virtual TSharedPtr<FUserOnlineAccount> GetUserAccount(const FUniqueNetId& UserId) const override;
	virtual TArray<TSharedPtr<FUserOnlineAccount> > GetAllUserAccounts() const override;
	virtual TSharedPtr<const FUniqueNetId> GetUniquePlayerId(int32 LocalUserNum) const override;
	virtual TSharedPtr<const FUniqueNetId> CreateUniquePlayerId(uint8* Bytes, int32 Size) override;
	virtual TSharedPtr<const FUniqueNetId> CreateUniquePlayerId(const FString& Str) override;
	virtual ELoginStatus::Type GetLoginStatus(int32 LocalUserNum) const override;
	virtual ELoginStatus::Type GetLoginStatus(const FUniqueNetId& UserId) const override;
	virtual FString GetPlayerNickname(int32 LocalUserNum) const override;
	virtual FString GetPlayerNickname(const FUniqueNetId& UserId) const override;
	virtual FString GetAuthToken(int32 LocalUserNum) const override;
	virtual void RevokeAuthToken(const FUniqueNetId& UserId, const FOnRevokeAuthTokenCompleteDelegate& Delegate) override;
	virtual void GetUserPrivilege(const FUniqueNetId& UserId, EUserPrivileges::Type Privilege, const FOnGetUserPrivilegeCompleteDelegate& Delegate) override;
	//virtual FPlatformUserId GetPlatformUserIdFromUniqueNetId(const FUniqueNetId& UniqueNetId) override;
	virtual FPlatformUserId GetPlatformUserIdFromUniqueNetId(const FUniqueNetId& UniqueNetId) const override;
	virtual FString GetAuthType() const override; // 4.11

	// Not part of the oss, but we use it internally
	TSharedPtr<FUserOnlineAccountUEtopia> GetUEtopiaUserAccount(const FUniqueNetId& UserId) const;

	// FOnlineIdentityUEtopia

	/**
	 * Constructor
	 *
	 * @param InSubsystem online subsystem being used
	 */
	//FOnlineIdentityUEtopia(class FOnlineSubsystemUEtopia* InSubsystem);
	FOnlineIdentityUEtopia(FOnlineSubsystemUEtopia* InSubsystem);

	/**
	 * Destructor
	 */
	virtual ~FOnlineIdentityUEtopia();

	/** @return an invalid/empty unique id */
	static const FUniqueNetId& GetEmptyUniqueId();


	/**
	* Used to do any time based processing of tasks
	*
	* @param DeltaTime the amount of time that has elapsed since the last tick
	*/
	void Tick(float DeltaTime);

	// Populated through user login process
	FString SocketExternalIp;
	bool SocketExternalIpSet;

	FString firebaseUser;

PACKAGE_SCOPE:
	/**
	* Login with an existing access token
	*
	* @param LocalUserNum id of the local user initiating the request
	* @param AccessToken access token already received from Facebook
	* @param InCompletionDelegate delegate to fire when operation completes
	*/
	void Login(int32 LocalUserNum, const FString& AccessToken, const FOnLoginCompleteDelegate& InCompletionDelegate);
	/**
	* Retrieve the profile for a given user and access token
	*
	* @param LocalUserNum the controller number of the associated user
	* @param AccessToken associated access token to make the request
	* @param InProfileFields profile fields to retrieve
	* @param InCompletionDelegate delegate to fire when request is completed
	*/
	void ProfileRequest(int32 LocalUserNum, const FString& AccessToken, const TArray<FString>& InProfileFields, FOnProfileRequestComplete& InCompletionDelegate);


	/**
	* Request additional permissions for an already logged in user.  Activates the external UI for user interaction
	*
	* @param LocalUserNum id of the local user initiating the request
	* @param AddlPermissions list of additional permissions that are been requested
	* @param InCompletionDelegate delegate to fire when request has completed
	*/
	void RequestElevatedPermissions(int32 LocalUserNum, const TArray<FSharingPermission>& AddlPermissions, const FOnLoginCompleteDelegate& InCompletionDelegate);

	/**
	* Retrieve the permissions for a given user and access token
	*
	* @param LocalUserNum the controller number of the associated user
	* @param InCompletionDelegate delegate to fire when request is completed
	*/
	void RequestCurrentPermissions(int32 LocalUserNum, FOnRequestCurrentPermissionsComplete& InCompletionDelegate);

	/** @return the login configuration details */
	const FUEtopiaLoginURL& GetLoginURLDetails() const { return LoginURLDetails; }

protected:
	/** Profile fields */
	TArray<FString> ProfileFields;

	/** Parent subsystem */
	FOnlineSubsystemUEtopia* UEtopiaSubsystem;
	/** URL for UEtopia API to retrieve personal details */
	FString MeURL;
private:

	/**
	* Ticks the registration process handling timeouts, etc.
	*
	* @param DeltaTime the amount of time that has elapsed since last tick
	*/
	void TickLogin(float DeltaTime);

	/**
	 * Should use the initialization constructor instead
	 */
	//FOnlineIdentityUEtopia();

	/** Ids mapped to locally registered users */
	//TMap<FUniqueNetIdString, TSharedRef<FUserOnlineAccountUEtopia>> UserAccounts;


	/**
	* Parses the results into a user account entry
	*
	* @param Results the string returned by the login process
	* @param Account the account structure to fill in
	*
	* @return true if it parsed correctly, false otherwise
	*/
	bool ParseLoginResults(const FString& Results, FUserOnlineAccountUEtopia& Account);

	/**
	* Delegate called when a user /me request from uetopia is complete
	*/
	// This was old and commented out...
	//void MeUser_HttpRequestComplete(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded);
	// This was active in 4.23 but throws an error now.
	//void MeUser_HttpRequestComplete(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FOnProfileRequestComplete InCompletionDelegate);

	// reverting back to the old one
	void MeUser_HttpRequestComplete(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded);

	/**
	* Request a Token Refresh from the backend
	*/
	bool RequestTokenRefresh();

	/**
	* Delegate called when a token refresh request is complete
	*/
	void TokenRefresh_HttpRequestComplete(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded);


	/** Info used to send request to register a user */
	struct FPendingLoginUser
	{
		FPendingLoginUser(
			int32 InLocalUserNum = 0,
			const FString& InAccessToken = FString()
			)
			: LocalUserNum(InLocalUserNum)
			, AccessToken(InAccessToken)
		{

		}
		/** local index of user being registered */
		int32 LocalUserNum;
		/** Access token being used to login to Facebook */
		FString AccessToken;
	};
	/** List of pending Http requests for user registration */
	TMap<class IHttpRequest*, FPendingLoginUser> LoginUserRequests;

	/**
	* Delegate fired when the internal call to Login() with AccessToken is specified
	*
	* @param LocalUserNum index of the local user initiating the request
	* @param bWasSuccessful was the login call successful
	* @param UserId user id of the logged in user, or null if login failed
	* @param Error error string if applicable
	*/
	void OnAccessTokenLoginComplete(int32 LocalUserNum, bool bWasSuccessful, const FUniqueNetId& UserId, const FString& Error);

	/**
	* Delegate fired when the call to ShowLoginUI completes
	*/
	void OnExternalUILoginComplete(TSharedPtr<const FUniqueNetId> UniqueId, const int ControllerIndex, const FOnlineError& /*Error*/);

	/**
	* Delegate fired when the call to ShowLoginUI completes for requesting elevated permissions
	*/
	// changed in 4.20
	// void OnExternalUIElevatedPermissionsComplete(TSharedPtr<const FUniqueNetId> UniqueId, const int ControllerIndex, FOnLoginCompleteDelegate InCompletionDelegate);
	void OnExternalUIElevatedPermissionsComplete(TSharedPtr<const FUniqueNetId> UniqueId, const int ControllerIndex, const FOnlineError& /*Error*/);

	/**
	* Delegate called when current permission request completes
	*
	* @param LocalUserNum user that made the request
	* @param bWasSuccesful was the request successful
	* @param NewPermissions array of all known permissions
	* @param CompletionDelegate follow up delegate after this request is complete
	*/
	void OnRequestCurrentPermissionsComplete(int32 LocalUserNum, bool bWasSuccessful, const TArray<FSharingPermission>& NewPermissions, FOnLoginCompleteDelegate CompletionDelegate);


};

typedef TSharedPtr<FOnlineIdentityUEtopia, ESPMode::ThreadSafe> FOnlineIdentityUEtopiaPtr;
